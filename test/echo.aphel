define IOCport, 1
define stdout, 10
define stdin, 11
define STACK, 100000

// copied from print.aphel and modified
loc 0
IVT:
    bra setup

loc 2048
align 4

setup:
    li ra, IVT
    li rb, interrupt_handler
    .fill_IVT:
        sw  ra, rb // set whatever memory adress ra has to the interrupt_handler function
        add ra, ra, 8 //increment to next place at table

        cmp ra, 2048 // is it at end of table?
        blt .fill_IVT // if not, do it again
    li  fp, STACK
    mov sp, fp

    call ra, add_stdin_to_table

    call ra, stdin_set_IVT_base_address

    call ra, main
    spin:
        bra spin

add_stdin_to_table: 
    li rb, stdin_interrupt_handler // sets rb to address of the function stdin_interrupt_handler
    li rc, IVT // set rc to address of IVT
    sw rc, 88, rb // sets the memory at 11th position in IVT
    ret // go back

stdin_set_IVT_base_address:
    // prime IOC
    li rb, 0
    out IOCport, rb

    // send port number
    li rb, stdin
    out IOCport, rb

    // send interrupt number
    li rb, stdin // #*#*#* interrupt number doesnt HAVE to equal port number. i just used it here for convenience *#*#*#
    out IOCport, rb

    ret

interrupt_handler:

    li   ra, interrupt_handler_text
    call rb, print_cstring

    .spin:
        bra .spin
;

interrupt_handler_text: 
    utf8 "[interrupt]\n\0"
align 4

print_char: // (char ra)
    push rb
    out stdout, ra
    pop rb
    ret

print_cstring: ; (charptr: ra)
    push rb
    .loop:
        lbs rb, ra
        cmp rb, '\0'
        bez .end
        out stdout, rb
        add ra, ra, 1
        bra .loop
    .end:
    pop  rb
    ret
;

stdin_interrupt_handler:
    push ra
    push rb
    in ra, stdin
    call rb, print_char
    call rb, print_char
    call rb, print_char
    pop rb
    pop ra
    iret

// ================ //

main:
    li ra, init_text
    call rb, print_cstring

    .loop:
        bra .loop

init_text:
utf8 "made it to main function!\n\0"
align 4