mem.set: ; (region: ra, value: rb, length: rc)
    
    add rc, ra, rc

    .loop:
        cmp ra, rc
        beq .end

        sb  ra, rb
        add ra, ra, 1
        bra .loop
    
    .end:
    ret
;

mem.zero:
    add rb, ra, rb
    .loop:
        cmp ra, rb
        beq .end
        sb  ra, rz
        add ra, ra, 1
        bra .loop
    .end:
    ret
;
mem.eq: ; (region1: ra, region2: rb, length: rc) -> (bool: ra)
    push rd
    push re

    add rc, ra, rc

    .loop:
        cmp ra, rc
        beq .exit

        lbs rd, ra
        lbs re, rb
        cmp rd, re
        bne .exit
        add ra, ra, 1
        add rb, rb, 1
        bra .loop

    .exit:
        setfe ra

        pop re
        pop rd
        ret
;

mem.find: ; (region: ra, byte: rb, max_length: rc) -> (index: ra)
    push rd
    push re

    mov re, ra
    add rc, ra, rc

    .loop:
        cmp ra, rc
        beq .not_found

        lbs rd, ra
        cmp rd, rb
        beq .found
        add ra, ra, 1
        bra .loop

    .not_found:
        li ra, -1
        bra .exit

    .found:
        sub ra, ra, re

    .exit:
        pop re
        pop rd
        ret
