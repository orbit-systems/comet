define display.port, 10

define display.width,  1000
define display.height, 700

define display.size, 2100000 ; 1000*700/100

display.framebuffer:
    d64 0x0000000

display.clear: ; (RGB8 : ra) -> ()
    push ra
    push rb
    push rc
    push rd
    push re
    push rf
    push rg

    li rf, display.framebuffer
    lw rf, rf

    shl ra, ra, 40
    lsr ra, ra, 40 // zero upper bits of ra

    shl rc, ra, 24
    or  ra, rc, ra
    shl rb, ra, 8
    shl rc, ra, 16
    shl rd, ra, 48
    or  ra, ra, rd
    shl rd, rd, 8
    or  rb, rb, rd
    lsr rd, rc, 48
    or  rc, rc, rd
    lsr rd, rd, 8
    or  rb, rb, rd

    ; ra = GRBGRBGR
    ; rb = RBGRBGRB
    ; rc = BGRBGRBG

    li   rd, display.width
    umul rd, rd, display.height
    mod  re, rd, 8
    sub  rd, rd, re

    li rg, 0
    .fast_fill:
        sw  rf, 0,  ra
        sw  rf, 8,  rb
        sw  rf, 16, rc

        add rf, rf, 24
        add rg, rg, 8
        cmp rg, rd 
        blt .fast_fill

    li rg, 0

    shl ra, ra, 40
    lsr ra, ra, 40 // zero upper bits of ra

    .short_fill:
        cmp rg, re
        bge .exit
        sb rf, 0, ra
        sb rf, 1, rc
        sb rf, 2, rb 

        add rf, rf, 3
        add rg, rg, 1
        bra .short_fill
    
    .exit:

    pop rg
    pop rf
    pop re
    pop rd
    pop rc
    pop rb
    pop ra

    mov ri, ra

    ret
;

display.set_framebuffer: ; (buf: ra) -> ()
    push rb
    li rb, display.framebuffer
    sw rb, ra
    pop rb
    ret
;

display.update: ; () -> ()
    push ra
    li ra, display.framebuffer
    lw ra, ra
    out display.port, ra
    pop ra
    ret
;

display.rect:
    ; TODO
    ret

display.line:
    ; TODO
    ret

display.horiz_line:
    ret
